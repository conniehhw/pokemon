{"ast":null,"code":"var _jsxFileName = \"/Users/conniewong/bootcamp/react/pokemon/src/components/MadLibs.jsx\";\n// import { render } from \"@testing-library/react\";\nimport React, { Component } from \"react\";\nimport WordForm from \"./WordForm.js\";\nimport Story from \"./Story.js\";\nimport MadLibsGen from \"./MadLibsGen.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass MadLibs extends Component {\n  constructor() {\n    super(...arguments);\n    // state = {\n    //   madlibsgen: MadLibsGen,\n    //   selectedMadLibGen: MadLibsGen[2],\n    // };\n    this.state = {\n      selectedMadLibGen: null\n    };\n    // Override current state (setState, newState?) spread operator line 17 = lines 9 - 10\n    this.onWordInputChange = (key, value, index) => {\n      console.log(key);\n      console.log(value);\n      console.log(index);\n\n      // const newState is a copy of the oldState and spreading it across, newState has selected Madlibs (which story)\n      const newState = {\n        ...this.state\n      };\n      newState.selectedMadLibGen.words[index] = {\n        ...newState.selectedMadLibGen.words[index],\n        value: value\n      };\n      this.setState(newState);\n    };\n  }\n  // function that displays the story only if all values are present/inputted\n  isStoryComplete() {\n    for (let i = 0; i < this.state.selectedMadLibGen.words.length; i++) {\n      if (!this.state.selectedMadLibGen.words[i].value) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // Create select dropdown to allow user to switch selected MadLib to play\n  // map through the array in this.state.madlibsgen - gather titles, display as dropdown <options>\n  // using onChange event, set the selectedMadLibGen object\n\n  createMadlibDropdown() {\n    let output = [];\n    for (let i = 0; i < this.state.madlibsgen.length; i++) {\n      output.push( /*#__PURE__*/_jsxDEV(\"option\", {\n        value: i,\n        children: this.state.madlibsgen[i].title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 19\n      }, this));\n    }\n    return output;\n  }\n  changeMadlibSelection(event) {\n    // console.log(event.target.value);\n    this.setState({\n      selectedMadLibgen: MadLibsGen[event.target.value]\n    });\n  }\n\n  // upon selection of Madlib (onChange), this.changeMadlibSelection is called\n  render() {\n    console.log(this.state.selectedMadLibGen);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"MadLibs\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Mad Libs page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Select a Madlib\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => this.changeMadlibSelection(e),\n        children: this.createMadlibDropdown()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WordForm, {\n        words: this.state.selectedMadLibGen.words,\n        onInputChange: this.onWordInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), this.isStoryComplete() && /*#__PURE__*/_jsxDEV(Story, {\n        text: this.state.selectedMadLibGen.getText()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default MadLibs;","map":{"version":3,"names":["React","Component","WordForm","Story","MadLibsGen","jsxDEV","_jsxDEV","MadLibs","constructor","arguments","state","selectedMadLibGen","onWordInputChange","key","value","index","console","log","newState","words","setState","isStoryComplete","i","length","createMadlibDropdown","output","madlibsgen","push","children","title","fileName","_jsxFileName","lineNumber","columnNumber","changeMadlibSelection","event","selectedMadLibgen","target","render","className","onChange","e","onInputChange","text","getText"],"sources":["/Users/conniewong/bootcamp/react/pokemon/src/components/MadLibs.jsx"],"sourcesContent":["// import { render } from \"@testing-library/react\";\nimport React, { Component } from \"react\";\nimport WordForm from \"./WordForm.js\";\nimport Story from \"./Story.js\";\nimport MadLibsGen from \"./MadLibsGen.js\";\n\nclass MadLibs extends Component {\n  // state = {\n  //   madlibsgen: MadLibsGen,\n  //   selectedMadLibGen: MadLibsGen[2],\n  // };\n\n  state = {\n    selectedMadLibGen: null,\n  };\n\n  // Override current state (setState, newState?) spread operator line 17 = lines 9 - 10\n  onWordInputChange = (key, value, index) => {\n    console.log(key);\n    console.log(value);\n    console.log(index);\n\n    // const newState is a copy of the oldState and spreading it across, newState has selected Madlibs (which story)\n    const newState = {\n      ...this.state,\n    };\n    newState.selectedMadLibGen.words[index] = {\n      ...newState.selectedMadLibGen.words[index],\n      value: value,\n    };\n    this.setState(newState);\n  };\n\n  // function that displays the story only if all values are present/inputted\n  isStoryComplete() {\n    for (let i = 0; i < this.state.selectedMadLibGen.words.length; i++) {\n      if (!this.state.selectedMadLibGen.words[i].value) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // Create select dropdown to allow user to switch selected MadLib to play\n  // map through the array in this.state.madlibsgen - gather titles, display as dropdown <options>\n  // using onChange event, set the selectedMadLibGen object\n\n  createMadlibDropdown() {\n    let output = [];\n    for (let i = 0; i < this.state.madlibsgen.length; i++) {\n      output.push(<option value={i}>{this.state.madlibsgen[i].title}</option>);\n    }\n    return output;\n  }\n\n  changeMadlibSelection(event) {\n    // console.log(event.target.value);\n    this.setState({\n      selectedMadLibgen: MadLibsGen[event.target.value],\n    });\n  }\n\n  // upon selection of Madlib (onChange), this.changeMadlibSelection is called\n  render() {\n    console.log(this.state.selectedMadLibGen);\n\n    return (\n      <div className=\"MadLibs\">\n        <h1>Mad Libs page</h1>\n        <h2>Select a Madlib</h2>\n\n        <select onChange={(e) => this.changeMadlibSelection(e)}>\n          {this.createMadlibDropdown()}\n          {/* {\" \"} */}\n        </select>\n\n        {/* {!this.state.selectedMadLibGen ? this.createMadlibDropdown() : null} */}\n        {/* // if has someting selcted then don'm tdo anything otherwise create the drop down */}\n\n        <WordForm\n          words={this.state.selectedMadLibGen.words}\n          onInputChange={this.onWordInputChange}\n        />\n        {this.isStoryComplete() && (\n          <Story text={this.state.selectedMadLibGen.getText()} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default MadLibs;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}