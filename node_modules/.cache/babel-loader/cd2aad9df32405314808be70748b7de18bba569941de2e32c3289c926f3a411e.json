{"ast":null,"code":"var _jsxFileName = \"/Users/conniewong/bootcamp/react/pokemon/src/components/MadLibs.jsx\";\n// import { render } from \"@testing-library/react\";\nimport React, { Component } from \"react\";\nimport WordForm from \"./WordForm.js\";\nimport Story from \"./Story.js\";\nimport MadLibsGen from \"./MadLibsGen.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass MadLibs extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      madlibsgen: MadLibsGen,\n      selectedMadLibGen: MadLibsGen[0]\n    };\n    // state = {\n    //   selectedMadLibGen: null\n    // }\n    // Override current state (setState, newState?) spread operator line 17 = lines 9 - 10\n    this.onWordInputChange = (key, value, index) => {\n      // console.log(key);\n      // console.log(value);\n      // console.log(index);\n\n      // const newState is a copy of the oldState and spreading it across, newState has selected Madlibs (which story)\n      const newState = {\n        ...this.state\n      };\n      newState.selectedMadLibGen.words[index] = {\n        ...newState.selectedMadLibGen.words[index],\n        value: value\n      };\n      this.setState(newState);\n    };\n  }\n  // function that displays the story only if all values are present/inputted\n  isStoryComplete() {\n    for (let i = 0; i < this.state.selectedMadLibGen.words.length; i++) {\n      if (!this.state.selectedMadLibGen.words[i].value) {\n        return false;\n      }\n      return true;\n    }\n  }\n\n  // Create select dropdown to allow user to switch selected MadLib to play\n  // map through the array in this.state.madlibsgen - gather titles, display as dropdown <options>\n  // using onChange event, set the selectedMadLibGen object\n\n  createDropDownofMadLibs() {\n    let output = [];\n    for (let i = 0; i < this.state.selectedMadLibGen.length; i++) {}\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"MadLibs\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Mad Libs page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), !this.state.selectedMadLibGen ? this.createDropDownOfMadLibs() : null, /*#__PURE__*/_jsxDEV(WordForm, {\n        words: this.state.selectedMadLibGen.words,\n        onInputChange: this.onWordInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), this.isStoryComplete() && /*#__PURE__*/_jsxDEV(Story, {\n        text: this.state.selectedMadLibGen.getText()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// const MadLibs = () => {\n//   return (\n//     <main className=\"App-home\">\n//       <div>Mad Libs page</div>\n\n//       <WordForm />\n//     </main>\n//   );\n// };\n\nexport default MadLibs;","map":{"version":3,"names":["React","Component","WordForm","Story","MadLibsGen","jsxDEV","_jsxDEV","MadLibs","constructor","arguments","state","madlibsgen","selectedMadLibGen","onWordInputChange","key","value","index","newState","words","setState","isStoryComplete","i","length","createDropDownofMadLibs","output","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","createDropDownOfMadLibs","onInputChange","text","getText"],"sources":["/Users/conniewong/bootcamp/react/pokemon/src/components/MadLibs.jsx"],"sourcesContent":["// import { render } from \"@testing-library/react\";\nimport React, { Component } from \"react\";\nimport WordForm from \"./WordForm.js\";\nimport Story from \"./Story.js\";\nimport MadLibsGen from \"./MadLibsGen.js\";\n\nclass MadLibs extends Component {\n  state = {\n    madlibsgen: MadLibsGen,\n    selectedMadLibGen: MadLibsGen[0],\n  };\n\n  // state = {\n  //   selectedMadLibGen: null\n  // }\n\n  // Override current state (setState, newState?) spread operator line 17 = lines 9 - 10\n  onWordInputChange = (key, value, index) => {\n    // console.log(key);\n    // console.log(value);\n    // console.log(index);\n\n    // const newState is a copy of the oldState and spreading it across, newState has selected Madlibs (which story)\n    const newState = {\n      ...this.state,\n    };\n\n    newState.selectedMadLibGen.words[index] = {\n      ...newState.selectedMadLibGen.words[index],\n      value: value,\n    };\n    this.setState(newState);\n  };\n\n  // function that displays the story only if all values are present/inputted\n  isStoryComplete() {\n    for (let i = 0; i < this.state.selectedMadLibGen.words.length; i++) {\n      if (!this.state.selectedMadLibGen.words[i].value) {\n        return false;\n      }\n      return true;\n    }\n  }\n\n  // Create select dropdown to allow user to switch selected MadLib to play\n  // map through the array in this.state.madlibsgen - gather titles, display as dropdown <options>\n  // using onChange event, set the selectedMadLibGen object\n\n  createDropDownofMadLibs() {\n    let output = [];\n    for (let i = 0; i < this.state.selectedMadLibGen.length; i++) {}\n  }\n\n  render() {\n    return (\n      <div className=\"MadLibs\">\n        <h1>Mad Libs page</h1>\n        {!this.state.selectedMadLibGen ? this.createDropDownOfMadLibs() : null}\n\n        <WordForm\n          words={this.state.selectedMadLibGen.words}\n          onInputChange={this.onWordInputChange}\n        />\n        {this.isStoryComplete() && (\n          <Story text={this.state.selectedMadLibGen.getText()} />\n        )}\n      </div>\n    );\n  }\n}\n\n// const MadLibs = () => {\n//   return (\n//     <main className=\"App-home\">\n//       <div>Mad Libs page</div>\n\n//       <WordForm />\n//     </main>\n//   );\n// };\n\nexport default MadLibs;\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,QAAQ,MAAM,eAAe;AACpC,OAAOC,KAAK,MAAM,YAAY;AAC9B,OAAOC,UAAU,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,OAAO,SAASN,SAAS,CAAC;EAAAO,YAAA;IAAA,SAAAC,SAAA;IAAA,KAC9BC,KAAK,GAAG;MACNC,UAAU,EAAEP,UAAU;MACtBQ,iBAAiB,EAAER,UAAU,CAAC,CAAC;IACjC,CAAC;IAED;IACA;IACA;IAEA;IAAA,KACAS,iBAAiB,GAAG,CAACC,GAAG,EAAEC,KAAK,EAAEC,KAAK,KAAK;MACzC;MACA;MACA;;MAEA;MACA,MAAMC,QAAQ,GAAG;QACf,GAAG,IAAI,CAACP;MACV,CAAC;MAEDO,QAAQ,CAACL,iBAAiB,CAACM,KAAK,CAACF,KAAK,CAAC,GAAG;QACxC,GAAGC,QAAQ,CAACL,iBAAiB,CAACM,KAAK,CAACF,KAAK,CAAC;QAC1CD,KAAK,EAAEA;MACT,CAAC;MACD,IAAI,CAACI,QAAQ,CAACF,QAAQ,CAAC;IACzB,CAAC;EAAA;EAED;EACAG,eAAeA,CAAA,EAAG;IAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACX,KAAK,CAACE,iBAAiB,CAACM,KAAK,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MAClE,IAAI,CAAC,IAAI,CAACX,KAAK,CAACE,iBAAiB,CAACM,KAAK,CAACG,CAAC,CAAC,CAACN,KAAK,EAAE;QAChD,OAAO,KAAK;MACd;MACA,OAAO,IAAI;IACb;EACF;;EAEA;EACA;EACA;;EAEAQ,uBAAuBA,CAAA,EAAG;IACxB,IAAIC,MAAM,GAAG,EAAE;IACf,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACX,KAAK,CAACE,iBAAiB,CAACU,MAAM,EAAED,CAAC,EAAE,EAAE,CAAC;EACjE;EAEAI,MAAMA,CAAA,EAAG;IACP,oBACEnB,OAAA;MAAKoB,SAAS,EAAC,SAAS;MAAAC,QAAA,gBACtBrB,OAAA;QAAAqB,QAAA,EAAI;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACrB,CAAC,IAAI,CAACrB,KAAK,CAACE,iBAAiB,GAAG,IAAI,CAACoB,uBAAuB,CAAC,CAAC,GAAG,IAAI,eAEtE1B,OAAA,CAACJ,QAAQ;QACPgB,KAAK,EAAE,IAAI,CAACR,KAAK,CAACE,iBAAiB,CAACM,KAAM;QAC1Ce,aAAa,EAAE,IAAI,CAACpB;MAAkB;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC,CAAC,EACD,IAAI,CAACX,eAAe,CAAC,CAAC,iBACrBd,OAAA,CAACH,KAAK;QAAC+B,IAAI,EAAE,IAAI,CAACxB,KAAK,CAACE,iBAAiB,CAACuB,OAAO,CAAC;MAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CACvD;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAEV;AACF;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,eAAexB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}